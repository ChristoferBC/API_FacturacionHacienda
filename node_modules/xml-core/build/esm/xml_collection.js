import { Collection } from './collection.js';
import { XE, XmlError } from './error.js';
import { isElement } from './utils.js';
import { XmlObject } from './xml_object.js';
export class XmlCollection extends XmlObject {
    constructor() {
        super(...arguments);
        this.MaxOccurs = Number.MAX_VALUE;
        this.MinOccurs = 0;
        this.items = [];
    }
    HasChanged() {
        const res = super.HasChanged();
        const changed = this.Some((item) => item.HasChanged());
        return res || changed;
    }
    get Count() {
        return this.items.length;
    }
    Item(index) {
        return this.items[index] || null;
    }
    Add(item) {
        this.items.push(item);
        this.element = null;
    }
    Pop() {
        this.element = null;
        return this.items.pop();
    }
    RemoveAt(index) {
        this.items = this.items.filter((item, index2) => index2 !== index);
        this.element = null;
    }
    Clear() {
        this.items = [];
        this.element = null;
    }
    GetIterator() {
        return this.items;
    }
    ForEach(cb) {
        this.GetIterator().forEach(cb);
    }
    Map(cb) {
        return new Collection(this.GetIterator().map(cb));
    }
    Filter(cb) {
        return new Collection(this.GetIterator().filter(cb));
    }
    Sort(cb) {
        return new Collection(this.GetIterator().sort(cb));
    }
    Every(cb) {
        return this.GetIterator().every(cb);
    }
    Some(cb) {
        return this.GetIterator().some(cb);
    }
    IsEmpty() {
        return this.Count === 0;
    }
    OnGetXml(element) {
        for (const item of this.GetIterator()) {
            const el = item.GetXml();
            if (el) {
                element.appendChild(el);
            }
        }
    }
    OnLoadXml(element) {
        const self = this.GetStatic();
        if (!self.parser) {
            throw new XmlError(XE.XML_EXCEPTION, `${self.localName} doesn't have required 'parser' in @XmlElement`);
        }
        for (let i = 0; i < element.childNodes.length; i++) {
            const node = element.childNodes.item(i);
            if (!(isElement(node) &&
                node.localName === self.parser.localName &&
                node.namespaceURI == self.namespaceURI)) {
                continue;
            }
            const el = node;
            const item = new self.parser();
            item.LoadXml(el);
            this.Add(item);
        }
    }
}
