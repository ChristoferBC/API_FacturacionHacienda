"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
exports.Parse = Parse;
exports.Stringify = Stringify;
exports.SelectSingleNode = SelectSingleNode;
exports.SelectNamespaces = SelectNamespaces;
exports.assign = assign;
exports.isElement = isElement;
exports.isDocument = isDocument;
exports.setNodeDependencies = setNodeDependencies;
exports.getNodeDependency = getNodeDependency;
const xml_js_1 = require("./xml.js");
function SelectNodesEx(node, xPath) {
    const doc = node.ownerDocument == null ? node : node.ownerDocument;
    const nsResolver = document.createNSResolver(node.ownerDocument == null
        ? node.documentElement
        : node.ownerDocument.documentElement);
    const personIterator = doc.evaluate(xPath, node, nsResolver, XPathResult.ANY_TYPE, null);
    const ns = [];
    let n;
    while ((n = personIterator.iterateNext())) {
        ns.push(n);
    }
    return ns;
}
function SelectNodesNode(node, xPath) {
    const xpath = getNodeDependency('xpath').select;
    return xpath(xPath, node);
}
exports.Select = typeof self !== 'undefined' ? SelectNodesEx : SelectNodesNode;
function Parse(xmlString) {
    xmlString = xmlString.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    let DOMParserCtor;
    if (typeof DOMParser !== 'undefined') {
        DOMParserCtor = DOMParser;
    }
    else {
        DOMParserCtor = getNodeDependency('DOMParser');
    }
    return new DOMParserCtor().parseFromString(xmlString, xml_js_1.APPLICATION_XML);
}
function Stringify(target) {
    let XMLSerializerCtor;
    if (typeof XMLSerializer !== 'undefined') {
        XMLSerializerCtor = XMLSerializer;
    }
    else {
        XMLSerializerCtor = getNodeDependency('XMLSerializer');
    }
    return new XMLSerializerCtor().serializeToString(target);
}
function SelectSingleNode(node, path) {
    const ns = (0, exports.Select)(node, path);
    if (ns && ns.length > 0) {
        return ns[0];
    }
    return null;
}
function _SelectNamespaces(node, selectedNodes = {}) {
    if (isElement(node)) {
        if (node.namespaceURI &&
            node.namespaceURI !== 'http://www.w3.org/XML/1998/namespace' &&
            !selectedNodes[node.prefix || '']) {
            selectedNodes[node.prefix ? node.prefix : ''] = node.namespaceURI;
        }
        for (let i = 0; i < node.childNodes.length; i++) {
            const childNode = node.childNodes.item(i);
            if (childNode && childNode.nodeType === xml_js_1.XmlNodeType.Element) {
                _SelectNamespaces(childNode, selectedNodes);
            }
        }
    }
}
function SelectNamespaces(node) {
    const attrs = {};
    _SelectNamespaces(node, attrs);
    return attrs;
}
function assign(_target, ...sources) {
    const res = sources.length > 0 ? sources[0] : _target;
    for (let i = 1; i < sources.length; i++) {
        const obj = sources[i];
        for (const prop in obj) {
            if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
                continue;
            }
            res[prop] = obj[prop];
        }
    }
    return res;
}
function isNodeType(obj, type) {
    return obj && obj.nodeType === type;
}
function isElement(obj) {
    return isNodeType(obj, xml_js_1.XmlNodeType.Element);
}
function isDocument(obj) {
    return isNodeType(obj, xml_js_1.XmlNodeType.Document);
}
const nodeDependencies = new Map();
function setNodeDependencies(deps) {
    for (const key in deps) {
        nodeDependencies.set(key, deps[key]);
    }
}
function getNodeDependency(key) {
    const dep = nodeDependencies.get(key);
    if (!dep) {
        throw new Error(`Node dependency not found: ${key}. Please use 'setNodeDependencies' to register it.`);
    }
    return dep;
}
