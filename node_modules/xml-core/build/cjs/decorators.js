"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XmlElement = XmlElement;
exports.XmlChildElement = XmlChildElement;
exports.XmlAttribute = XmlAttribute;
exports.XmlContent = XmlContent;
const tslib_1 = require("tslib");
const CONST = tslib_1.__importStar(require("./const.js"));
const MAX = 1e9;
function assign(_target, ...sources) {
    const res = _target;
    for (let i = 0; i < sources.length; i++) {
        const obj = sources[i];
        for (const prop in obj) {
            if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
                continue;
            }
            res[prop] = obj[prop];
        }
    }
    return res;
}
function XmlElement(params) {
    return (target) => {
        const t = target;
        t.localName = params.localName || t.name;
        t.namespaceURI = params.namespaceURI || t.namespaceURI || null;
        t.prefix = params.prefix || t.prefix || null;
        t.parser = params.parser || t.parser;
        if (t.target !== t) {
            t.items = assign({}, t.items);
        }
        t.target = target;
    };
}
function XmlChildElement(params = {}) {
    return (target, propertyKey) => {
        const t = target.constructor;
        const key = propertyKey;
        if (!t.items) {
            t.items = {};
        }
        if (t.target !== t) {
            t.items = assign({}, t.items);
        }
        t.target = target;
        let itemConfig;
        if (params.parser) {
            itemConfig = {
                parser: params.parser,
                required: params.required || false,
                maxOccurs: params.maxOccurs || MAX,
                minOccurs: params.minOccurs === void 0 ? 0 : params.minOccurs,
                noRoot: params.noRoot || false,
            };
        }
        else {
            itemConfig = {
                namespaceURI: params.namespaceURI || null,
                required: params.required || false,
                prefix: params.prefix || null,
                defaultValue: params.defaultValue,
                converter: params.converter,
                noRoot: params.noRoot || false,
            };
        }
        params.localName =
            params.localName || (params.parser && params.parser.localName) || key;
        const items = t.items;
        const parserNamespaceURI = params.parser && params.parser.namespaceURI;
        items[key] = {
            ...itemConfig,
            namespaceURI: params.namespaceURI || parserNamespaceURI || null,
            prefix: params.prefix || (params.parser && params.parser.prefix) || null,
            localName: params.localName,
            type: CONST.ELEMENT,
        };
        defineProperty(target, key, params);
    };
}
function XmlAttribute(params = { required: false, namespaceURI: null }) {
    return (target, propertyKey) => {
        const t = target.constructor;
        const key = propertyKey;
        if (!params.localName) {
            params.localName = propertyKey;
        }
        if (!t.items) {
            t.items = {};
        }
        if (t.target !== t) {
            t.items = assign({}, t.items);
        }
        t.target = target;
        const items = t.items;
        items[propertyKey] = params;
        items[propertyKey].type = CONST.ATTRIBUTE;
        defineProperty(target, key, params);
    };
}
function XmlContent(params = { required: false }) {
    return (target, propertyKey) => {
        const t = target.constructor;
        const key = propertyKey;
        if (!t.items) {
            t.items = {};
        }
        if (t.target !== t) {
            t.items = assign({}, t.items);
        }
        t.target = target;
        const items = t.items;
        items[propertyKey] = params;
        items[propertyKey].type = CONST.CONTENT;
        defineProperty(target, key, params);
    };
}
function defineProperty(target, key, params) {
    const key2 = `_${key}`;
    const opt = {
        set: function (v) {
            if (this[key2] !== v) {
                this.element = null;
                this[key2] = v;
            }
        },
        get: function () {
            if (this[key2] === void 0) {
                let defaultValue = params.defaultValue;
                if (params.parser) {
                    defaultValue = new params.parser();
                    defaultValue.localName = params.localName;
                }
                this[key2] = defaultValue;
            }
            return this[key2];
        },
    };
    Object.defineProperty(target, key2, { writable: true, enumerable: false });
    Object.defineProperty(target, key, opt);
}
