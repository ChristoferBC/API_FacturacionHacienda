import { type AssocArray } from './types.js';
export type SelectNodes = (node: Node, xPath: string) => Node[];
export declare const Select: SelectNodes;
export declare function Parse(xmlString: string): Document;
export declare function Stringify(target: Node): string;
/**
 * Returns single Node from given Node
 *
 * @export
 * @param {Node} node
 * @param {string} path
 * @returns
 */
export declare function SelectSingleNode(node: Node, path: string): Node | null;
export declare function SelectNamespaces(node: Element): AssocArray<string>;
export declare function assign(_target: any, ...sources: any[]): any;
/**
 * Returns true if object is a XML Element
 * @param obj Object to test
 */
export declare function isElement(obj: any): obj is Element;
/**
 * Returns true if object is a XML Document
 * @param obj Object to test
 */
export declare function isDocument(obj: any): obj is Document;
/**
 * Sets multiple node dependencies by updating the internal `nodeDependencies` map
 * with the provided key-value pairs.
 *
 * @param deps - An object containing dependency names as keys and their corresponding values.
 *
 * @since 1.2.0
 */
export declare function setNodeDependencies(deps: Record<string, any>): void;
/**
 * Retrieves a registered node dependency by its key.
 *
 * @template T The expected type of the dependency.
 * @param key - The unique key identifying the dependency.
 * @returns The dependency associated with the given key, cast to type T.
 * @throws {Error} If the dependency is not found for the provided key.
 *
 * @remarks
 * Dependencies must be registered using `setNodeDependencies` before retrieval.
 *
 * @since 1.2.0
 */
export declare function getNodeDependency<T = any>(key: string): T;
