"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetToken = void 0;
const axios_1 = __importDefault(require("axios"));
const querystring_1 = __importDefault(require("querystring"));
const MAIN_DOMAIN = 'https://idp.comprobanteselectronicos.go.cr';
const options = {
    prod: {
        serviceUrl: `${MAIN_DOMAIN}/auth/realms/rut/protocol/openid-connect/token`,
        clientId: 'api-prod'
    },
    stg: {
        serviceUrl: `${MAIN_DOMAIN}/auth/realms/rut-stag/protocol/openid-connect/token`,
        clientId: 'api-stag'
    }
};
class GetToken {
    constructor(scope) {
        this.props = this.initProps(scope.mode);
    }
    execute(_a) {
        return __awaiter(this, arguments, void 0, function* ({ username, password }) {
            const fetchResponse = yield axios_1.default.post(this.props.serviceUrl, querystring_1.default.stringify({
                client_id: this.props.clientId,
                grant_type: 'password',
                client_secret: '',
                username,
                password
            }), {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            });
            const data = fetchResponse.data;
            return {
                accessToken: data.access_token,
                expiresIn: data.expires_in,
                refreshToken: data.refresh_token,
                refreshExpiresIn: data.refresh_expires_in,
                sessionState: data.session_state,
                tokenType: data.token_type,
                scope: data.scope
            };
        });
    }
    initProps(mode) {
        return options[mode] || options.prod;
    }
}
exports.GetToken = GetToken;
//# sourceMappingURL=GetToken.js.map