import { AceptationStates } from '@src/ATV/core/types';
import { Command } from '../createDocument/types';
import { ATV } from '@src/ATV';
import { PersonProps } from '@src/ATV/core/Person';
export type CreateReceptorMessageCommandInput = {
    clave: string;
    emitterIdentifier: string;
    emitterIdentifierType: PersonProps['identifier']['type'];
    receptorIdentifier: string;
    receptorIdentifierType: PersonProps['identifier']['type'];
    documentIssueDate: Date;
    activityCode: string;
    taxCondition: string;
    totalTaxes: number;
    totalSale: number;
    aceptationState: AceptationStates;
    aceptationDetailMessage: string;
    branch: string;
    terminal: string;
    token: string;
    consecutive: string;
    signatureOptions: {
        buffer: string;
        password: string;
    };
};
export declare class CreateReceptorMessageCommand {
    private readonly serviceUrl;
    constructor(scope: ATV);
    execute(input: CreateReceptorMessageCommandInput): Promise<{
        command: Command;
        extraData: {
            xml: string;
            document: import("../../..").InvoiceDocumentContainer;
        };
    }>;
    private createDocumentCommand;
    private encodeXML;
    private acceptationStateToDocumentType;
    private processDocument;
}
