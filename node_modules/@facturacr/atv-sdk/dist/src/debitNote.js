"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCreditNote = void 0;
const index_1 = require("./lib/genXML/index");
const index_2 = require("./services/send/index");
const index_3 = require("./lib/genClave/index");
const comprobantes_1 = require("./helpers/comprobantes");
const VOUCHER_TYPE = 'ND';
function parseCreditNote(options) {
    const resum = (0, comprobantes_1.getBillResum)(options.frontEndRequest);
    const receiver = (0, comprobantes_1.getReceiver)(options.frontEndRequest);
    const sender = (0, comprobantes_1.getSender)(options.frontEndRequest);
    return {
        NotaDebitoElectronica: {
            Clave: options.clave,
            CodigoActividad: options.frontEndRequest.actividad.padStart(6, '0'),
            NumeroConsecutivo: options.consecutivo,
            FechaEmision: options.date.toISOString(),
            Emisor: sender,
            Receptor: receiver,
            CondicionVenta: '01',
            MedioPago: '01',
            DetalleServicio: {
                LineaDetalle: options.frontEndRequest.LineasDetalle
            },
            ResumenFactura: resum
        }
    };
}
exports.parseCreditNote = parseCreditNote;
function sendMessage(options) {
    const emisor = (0, comprobantes_1.getSimpleSender)(options.frontEndRequest);
    const receptor = (0, comprobantes_1.getSimpleReceiver)(options.frontEndRequest);
    const finalMesage = {
        clave: options.clave,
        fecha: options.date.toISOString(),
        emisor,
        receptor,
        comprobanteXml: options.xml
    };
    return (0, index_2.send)(options.token, finalMesage).catch((err) => {
        const response = err.response || {};
        const header = response.headers || {};
        console.log('x-error-cause', header['x-error-cause']);
    });
}
exports.default = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const date = new Date();
    const parsedOpts = (0, index_3.parseOptions)(options.frontEndRequest);
    const claveObj = (0, index_3.genClaveObj)(parsedOpts);
    const clave = (0, index_3.genString)(claveObj);
    const consecutivo = Object.values(claveObj.consecutivo).join('');
    const vaucher = parseCreditNote({
        frontEndRequest: options.frontEndRequest,
        consecutivo,
        clave,
        date
    });
    const xml = yield (0, index_1.genXML)(VOUCHER_TYPE, vaucher, Object.assign(Object.assign({}, options.xmlOpt), { base64: true }));
    return sendMessage({
        frontEndRequest: options.frontEndRequest,
        token: options.token,
        clave,
        date,
        xml
    });
});
//# sourceMappingURL=debitNote.js.map