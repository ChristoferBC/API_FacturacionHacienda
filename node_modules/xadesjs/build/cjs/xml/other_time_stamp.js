"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OtherTimeStamp = void 0;
const tslib_1 = require("tslib");
const xml_core_1 = require("xml-core");
const xmldsigjs_1 = require("xmldsigjs");
const generic_time_stamp_js_1 = require("./generic_time_stamp.js");
const xml_js_1 = require("./xml.js");
const xml_base_js_1 = require("./xml_base.js");
let OtherTimeStamp = class OtherTimeStamp extends xml_base_js_1.XadesObject {
};
exports.OtherTimeStamp = OtherTimeStamp;
tslib_1.__decorate([
    (0, xml_core_1.XmlAttribute)({
        localName: xml_js_1.XmlXades.AttributeNames.Id,
        defaultValue: '',
    }),
    tslib_1.__metadata("design:type", String)
], OtherTimeStamp.prototype, "Id", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        parser: generic_time_stamp_js_1.ReferenceInfos,
        noRoot: true,
    }),
    tslib_1.__metadata("design:type", generic_time_stamp_js_1.ReferenceInfos)
], OtherTimeStamp.prototype, "ReferenceInfo", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({ parser: xmldsigjs_1.CanonicalizationMethod }),
    tslib_1.__metadata("design:type", xmldsigjs_1.CanonicalizationMethod)
], OtherTimeStamp.prototype, "CanonicalizationMethod", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        parser: generic_time_stamp_js_1.EncapsulatedTimeStampCollection,
        noRoot: true,
    }),
    tslib_1.__metadata("design:type", generic_time_stamp_js_1.EncapsulatedTimeStampCollection)
], OtherTimeStamp.prototype, "EncapsulatedTimeStamp", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        parser: generic_time_stamp_js_1.XMLTimeStampCollection,
        noRoot: true,
    }),
    tslib_1.__metadata("design:type", generic_time_stamp_js_1.XMLTimeStampCollection)
], OtherTimeStamp.prototype, "XMLTimeStamp", void 0);
exports.OtherTimeStamp = OtherTimeStamp = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.OtherTimeStamp })
], OtherTimeStamp);
