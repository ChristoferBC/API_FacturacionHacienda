"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningCertificate = exports.CertIDList = exports.Cert = exports.IssuerSerial = exports.DigestAlgAndValueType = void 0;
const tslib_1 = require("tslib");
const xml_core_1 = require("xml-core");
const xmldsigjs_1 = require("xmldsigjs");
const xml_js_1 = require("./xml.js");
const xml_base_js_1 = require("./xml_base.js");
let DigestAlgAndValueType = class DigestAlgAndValueType extends xml_base_js_1.XadesObject {
};
exports.DigestAlgAndValueType = DigestAlgAndValueType;
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        parser: xmldsigjs_1.DigestMethod,
        required: true,
    }),
    tslib_1.__metadata("design:type", xmldsigjs_1.DigestMethod)
], DigestAlgAndValueType.prototype, "DigestMethod", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        localName: xmldsigjs_1.XmlSignature.ElementNames.DigestValue,
        namespaceURI: xmldsigjs_1.XmlSignature.NamespaceURI,
        prefix: xmldsigjs_1.XmlSignature.DefaultPrefix,
        converter: xml_core_1.XmlBase64Converter,
        required: true,
    }),
    tslib_1.__metadata("design:type", Uint8Array)
], DigestAlgAndValueType.prototype, "DigestValue", void 0);
exports.DigestAlgAndValueType = DigestAlgAndValueType = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.DigestAlgAndValue })
], DigestAlgAndValueType);
let IssuerSerial = class IssuerSerial extends xmldsigjs_1.X509IssuerSerial {
};
exports.IssuerSerial = IssuerSerial;
exports.IssuerSerial = IssuerSerial = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({
        localName: xml_js_1.XmlXades.ElementNames.IssuerSerial,
        namespaceURI: xml_js_1.XmlXades.NamespaceURI,
        prefix: xml_js_1.XmlXades.DefaultPrefix,
    })
], IssuerSerial);
let Cert = class Cert extends xml_base_js_1.XadesObject {
};
exports.Cert = Cert;
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        localName: xml_js_1.XmlXades.ElementNames.CertDigest,
        parser: DigestAlgAndValueType,
        required: true,
    }),
    tslib_1.__metadata("design:type", DigestAlgAndValueType)
], Cert.prototype, "CertDigest", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlChildElement)({
        parser: IssuerSerial,
        required: true,
    }),
    tslib_1.__metadata("design:type", xmldsigjs_1.X509IssuerSerial)
], Cert.prototype, "IssuerSerial", void 0);
tslib_1.__decorate([
    (0, xml_core_1.XmlAttribute)({ localName: xml_js_1.XmlXades.AttributeNames.URI }),
    tslib_1.__metadata("design:type", String)
], Cert.prototype, "Uri", void 0);
exports.Cert = Cert = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.Cert })
], Cert);
let CertIDList = class CertIDList extends xml_base_js_1.XadesCollection {
};
exports.CertIDList = CertIDList;
exports.CertIDList = CertIDList = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({
        localName: 'CertIDList',
        parser: Cert,
    })
], CertIDList);
let SigningCertificate = class SigningCertificate extends CertIDList {
};
exports.SigningCertificate = SigningCertificate;
exports.SigningCertificate = SigningCertificate = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.SigningCertificate })
], SigningCertificate);
