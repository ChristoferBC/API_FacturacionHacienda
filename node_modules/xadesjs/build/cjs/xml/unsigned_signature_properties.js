"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsignedSignatureProperties = exports.UnsignedSignatureProperty = exports.AttributeRevocationValues = exports.AttrAuthoritiesCertValues = exports.AttributeRevocationRefs = exports.AttributeCertificateRefs = exports.ArchiveTimeStamp = exports.RefsOnlyTimeStamp = exports.SigAndRefsTimeStamp = exports.SignatureTimeStamp = void 0;
const tslib_1 = require("tslib");
const xml_core_1 = require("xml-core");
const certificate_values_js_1 = require("./certificate_values.js");
const complete_certificate_refs_js_1 = require("./complete_certificate_refs.js");
const complete_revocation_refs_js_1 = require("./complete_revocation_refs.js");
const counter_signature_js_1 = require("./counter_signature.js");
const revocation_values_js_1 = require("./revocation_values.js");
const xades_time_stamp_js_1 = require("./xades_time_stamp.js");
const xml_js_1 = require("./xml.js");
const xml_base_js_1 = require("./xml_base.js");
let SignatureTimeStamp = class SignatureTimeStamp extends xades_time_stamp_js_1.XAdESTimeStamp {
};
exports.SignatureTimeStamp = SignatureTimeStamp;
exports.SignatureTimeStamp = SignatureTimeStamp = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.SignatureTimeStamp })
], SignatureTimeStamp);
let SigAndRefsTimeStamp = class SigAndRefsTimeStamp extends xades_time_stamp_js_1.XAdESTimeStamp {
};
exports.SigAndRefsTimeStamp = SigAndRefsTimeStamp;
exports.SigAndRefsTimeStamp = SigAndRefsTimeStamp = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.SigAndRefsTimeStamp })
], SigAndRefsTimeStamp);
let RefsOnlyTimeStamp = class RefsOnlyTimeStamp extends xades_time_stamp_js_1.XAdESTimeStamp {
};
exports.RefsOnlyTimeStamp = RefsOnlyTimeStamp;
exports.RefsOnlyTimeStamp = RefsOnlyTimeStamp = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.RefsOnlyTimeStamp })
], RefsOnlyTimeStamp);
let ArchiveTimeStamp = class ArchiveTimeStamp extends xades_time_stamp_js_1.XAdESTimeStamp {
};
exports.ArchiveTimeStamp = ArchiveTimeStamp;
exports.ArchiveTimeStamp = ArchiveTimeStamp = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.ArchiveTimeStamp })
], ArchiveTimeStamp);
let AttributeCertificateRefs = class AttributeCertificateRefs extends complete_certificate_refs_js_1.CompleteCertificateRefs {
};
exports.AttributeCertificateRefs = AttributeCertificateRefs;
exports.AttributeCertificateRefs = AttributeCertificateRefs = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.AttributeCertificateRefs })
], AttributeCertificateRefs);
let AttributeRevocationRefs = class AttributeRevocationRefs extends complete_revocation_refs_js_1.CompleteRevocationRefs {
};
exports.AttributeRevocationRefs = AttributeRevocationRefs;
exports.AttributeRevocationRefs = AttributeRevocationRefs = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.AttributeRevocationRefs })
], AttributeRevocationRefs);
let AttrAuthoritiesCertValues = class AttrAuthoritiesCertValues extends certificate_values_js_1.CertificateValues {
};
exports.AttrAuthoritiesCertValues = AttrAuthoritiesCertValues;
exports.AttrAuthoritiesCertValues = AttrAuthoritiesCertValues = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.AttrAuthoritiesCertValues })
], AttrAuthoritiesCertValues);
let AttributeRevocationValues = class AttributeRevocationValues extends revocation_values_js_1.RevocationValues {
};
exports.AttributeRevocationValues = AttributeRevocationValues;
exports.AttributeRevocationValues = AttributeRevocationValues = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: xml_js_1.XmlXades.ElementNames.AttributeRevocationValues })
], AttributeRevocationValues);
let UnsignedSignatureProperty = class UnsignedSignatureProperty extends xml_base_js_1.XadesObject {
};
exports.UnsignedSignatureProperty = UnsignedSignatureProperty;
exports.UnsignedSignatureProperty = UnsignedSignatureProperty = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({ localName: 'UnsignedSignatureProperty' })
], UnsignedSignatureProperty);
let UnsignedSignatureProperties = class UnsignedSignatureProperties extends xml_base_js_1.XadesCollection {
    OnLoadXml(element) {
        for (let i = 0; i < element.childNodes.length; i++) {
            const node = element.childNodes.item(i);
            if (node.nodeType !== xml_core_1.XmlNodeType.Element) {
                continue;
            }
            let XmlClass;
            switch (node.localName) {
                case xml_js_1.XmlXades.ElementNames.CounterSignature:
                    XmlClass = counter_signature_js_1.CounterSignature;
                    break;
                case xml_js_1.XmlXades.ElementNames.SignatureTimeStamp:
                    XmlClass = SignatureTimeStamp;
                    break;
                case xml_js_1.XmlXades.ElementNames.CompleteCertificateRefs:
                    XmlClass = complete_certificate_refs_js_1.CompleteCertificateRefs;
                    break;
                case xml_js_1.XmlXades.ElementNames.CompleteRevocationRefs:
                    XmlClass = complete_revocation_refs_js_1.CompleteRevocationRefs;
                    break;
                case xml_js_1.XmlXades.ElementNames.AttributeCertificateRefs:
                    XmlClass = AttributeCertificateRefs;
                    break;
                case xml_js_1.XmlXades.ElementNames.AttributeRevocationRefs:
                    XmlClass = AttributeRevocationRefs;
                    break;
                case xml_js_1.XmlXades.ElementNames.SigAndRefsTimeStamp:
                    XmlClass = SigAndRefsTimeStamp;
                    break;
                case xml_js_1.XmlXades.ElementNames.RefsOnlyTimeStamp:
                    XmlClass = RefsOnlyTimeStamp;
                    break;
                case xml_js_1.XmlXades.ElementNames.CertificateValues:
                    XmlClass = certificate_values_js_1.CertificateValues;
                    break;
                case xml_js_1.XmlXades.ElementNames.RevocationValues:
                    XmlClass = revocation_values_js_1.RevocationValues;
                    break;
                case xml_js_1.XmlXades.ElementNames.AttrAuthoritiesCertValues:
                    XmlClass = AttrAuthoritiesCertValues;
                    break;
                case xml_js_1.XmlXades.ElementNames.AttributeRevocationValues:
                    XmlClass = AttributeRevocationValues;
                    break;
                case xml_js_1.XmlXades.ElementNames.ArchiveTimeStamp:
                    XmlClass = ArchiveTimeStamp;
                    break;
            }
            if (XmlClass) {
                const item = XmlClass.LoadXml(node);
                this.Add(item);
            }
        }
    }
};
exports.UnsignedSignatureProperties = UnsignedSignatureProperties;
tslib_1.__decorate([
    (0, xml_core_1.XmlAttribute)({
        localName: xml_js_1.XmlXades.AttributeNames.Id,
        defaultValue: '',
    }),
    tslib_1.__metadata("design:type", String)
], UnsignedSignatureProperties.prototype, "Id", void 0);
exports.UnsignedSignatureProperties = UnsignedSignatureProperties = tslib_1.__decorate([
    (0, xml_core_1.XmlElement)({
        localName: xml_js_1.XmlXades.ElementNames.UnsignedSignatureProperties,
        parser: UnsignedSignatureProperty,
    })
], UnsignedSignatureProperties);
