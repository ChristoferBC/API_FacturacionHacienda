import { __decorate, __metadata } from "tslib";
import { XmlChildElement, XmlContent, XmlElement, XmlNumberConverter } from 'xml-core';
import { Transforms } from 'xmldsigjs';
import { AnyCollection } from './any.js';
import { ObjectIdentifier } from './object_identifier.js';
import { DigestAlgAndValueType } from './signing_certificate.js';
import { XmlXades } from './xml.js';
import { XadesCollection, XadesObject } from './xml_base.js';
let SigPolicyId = class SigPolicyId extends ObjectIdentifier {
};
SigPolicyId = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SigPolicyId })
], SigPolicyId);
export { SigPolicyId };
let SigPolicyHash = class SigPolicyHash extends DigestAlgAndValueType {
};
SigPolicyHash = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SigPolicyHash })
], SigPolicyHash);
export { SigPolicyHash };
let SigPolicyQualifier = class SigPolicyQualifier extends AnyCollection {
};
SigPolicyQualifier = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SigPolicyQualifier })
], SigPolicyQualifier);
export { SigPolicyQualifier };
let Integer = class Integer extends XadesObject {
};
__decorate([
    XmlContent({
        converter: XmlNumberConverter,
        required: true,
    }),
    __metadata("design:type", Number)
], Integer.prototype, "Value", void 0);
Integer = __decorate([
    XmlElement({ localName: 'int' })
], Integer);
export { Integer };
let IntegerList = class IntegerList extends XadesCollection {
};
IntegerList = __decorate([
    XmlElement({
        localName: 'IntegerList',
        parser: Integer,
    })
], IntegerList);
export { IntegerList };
let NoticeReference = class NoticeReference extends XadesObject {
};
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.Organization,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        required: true,
    }),
    __metadata("design:type", String)
], NoticeReference.prototype, "Organization", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.NoticeNumbers,
        parser: IntegerList,
        required: true,
    }),
    __metadata("design:type", IntegerList)
], NoticeReference.prototype, "NoticeNumbers", void 0);
NoticeReference = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.NoticeRef })
], NoticeReference);
export { NoticeReference };
let SPUserNotice = class SPUserNotice extends XadesObject {
};
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.NoticeRef,
        parser: NoticeReference,
    }),
    __metadata("design:type", NoticeReference)
], SPUserNotice.prototype, "NoticeRef", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.ExplicitText,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
    }),
    __metadata("design:type", String)
], SPUserNotice.prototype, "ExplicitText", void 0);
SPUserNotice = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SPUserNotice })
], SPUserNotice);
export { SPUserNotice };
let SPURI = class SPURI extends XadesObject {
};
__decorate([
    XmlContent(),
    __metadata("design:type", String)
], SPURI.prototype, "Value", void 0);
SPURI = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SPURI })
], SPURI);
export { SPURI };
let SigPolicyQualifiers = class SigPolicyQualifiers extends XadesCollection {
};
SigPolicyQualifiers = __decorate([
    XmlElement({
        localName: XmlXades.ElementNames.SigPolicyQualifiers,
        parser: SigPolicyQualifier,
    })
], SigPolicyQualifiers);
export { SigPolicyQualifiers };
let SignaturePolicyId = class SignaturePolicyId extends XadesObject {
};
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.SigPolicyId,
        parser: SigPolicyId,
        required: true,
    }),
    __metadata("design:type", SigPolicyId)
], SignaturePolicyId.prototype, "SigPolicyId", void 0);
__decorate([
    XmlChildElement({ parser: Transforms }),
    __metadata("design:type", Transforms)
], SignaturePolicyId.prototype, "Transforms", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.SigPolicyHash,
        parser: SigPolicyHash,
        required: true,
    }),
    __metadata("design:type", SigPolicyHash)
], SignaturePolicyId.prototype, "SigPolicyHash", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.SigPolicyQualifiers,
        parser: SigPolicyQualifiers,
    }),
    __metadata("design:type", SigPolicyQualifiers)
], SignaturePolicyId.prototype, "SigPolicyQualifiers", void 0);
SignaturePolicyId = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SignaturePolicyId })
], SignaturePolicyId);
export { SignaturePolicyId };
const XmlSignaturePolicyImpliedConverter = {
    set: (value) => {
        return true;
    },
    get: (value) => {
        return '';
    },
};
let SignaturePolicyIdentifier = class SignaturePolicyIdentifier extends XadesObject {
};
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.SignaturePolicyId,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        parser: SignaturePolicyId,
    }),
    __metadata("design:type", SignaturePolicyId)
], SignaturePolicyIdentifier.prototype, "SignaturePolicyId", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.SignaturePolicyImplied,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        converter: XmlSignaturePolicyImpliedConverter,
        defaultValue: false,
    }),
    __metadata("design:type", Boolean)
], SignaturePolicyIdentifier.prototype, "SignaturePolicyImplied", void 0);
SignaturePolicyIdentifier = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SignaturePolicyIdentifier })
], SignaturePolicyIdentifier);
export { SignaturePolicyIdentifier };
