import { __decorate, __metadata } from "tslib";
import { XmlAttribute, XmlChildElement, XmlElement, XmlBase64Converter } from 'xml-core';
import { DigestMethod, X509IssuerSerial, XmlSignature } from 'xmldsigjs';
import { XmlXades } from './xml.js';
import { XadesCollection, XadesObject } from './xml_base.js';
let DigestAlgAndValueType = class DigestAlgAndValueType extends XadesObject {
};
__decorate([
    XmlChildElement({
        parser: DigestMethod,
        required: true,
    }),
    __metadata("design:type", DigestMethod)
], DigestAlgAndValueType.prototype, "DigestMethod", void 0);
__decorate([
    XmlChildElement({
        localName: XmlSignature.ElementNames.DigestValue,
        namespaceURI: XmlSignature.NamespaceURI,
        prefix: XmlSignature.DefaultPrefix,
        converter: XmlBase64Converter,
        required: true,
    }),
    __metadata("design:type", Uint8Array)
], DigestAlgAndValueType.prototype, "DigestValue", void 0);
DigestAlgAndValueType = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.DigestAlgAndValue })
], DigestAlgAndValueType);
export { DigestAlgAndValueType };
let IssuerSerial = class IssuerSerial extends X509IssuerSerial {
};
IssuerSerial = __decorate([
    XmlElement({
        localName: XmlXades.ElementNames.IssuerSerial,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
    })
], IssuerSerial);
export { IssuerSerial };
let Cert = class Cert extends XadesObject {
};
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.CertDigest,
        parser: DigestAlgAndValueType,
        required: true,
    }),
    __metadata("design:type", DigestAlgAndValueType)
], Cert.prototype, "CertDigest", void 0);
__decorate([
    XmlChildElement({
        parser: IssuerSerial,
        required: true,
    }),
    __metadata("design:type", X509IssuerSerial)
], Cert.prototype, "IssuerSerial", void 0);
__decorate([
    XmlAttribute({ localName: XmlXades.AttributeNames.URI }),
    __metadata("design:type", String)
], Cert.prototype, "Uri", void 0);
Cert = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.Cert })
], Cert);
export { Cert };
let CertIDList = class CertIDList extends XadesCollection {
};
CertIDList = __decorate([
    XmlElement({
        localName: 'CertIDList',
        parser: Cert,
    })
], CertIDList);
export { CertIDList };
let SigningCertificate = class SigningCertificate extends CertIDList {
};
SigningCertificate = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.SigningCertificate })
], SigningCertificate);
export { SigningCertificate };
