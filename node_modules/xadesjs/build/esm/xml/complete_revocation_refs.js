import { __decorate, __metadata } from "tslib";
import { XmlAttribute, XmlChildElement, XmlElement, XmlBase64Converter, XmlNumberConverter, } from 'xml-core';
import { Any } from './any.js';
import { XadesDateTime } from './date_time.js';
import { DigestAlgAndValueType } from './signing_certificate.js';
import { XmlXades } from './xml.js';
import { XadesCollection, XadesObject } from './xml_base.js';
let OtherRef = class OtherRef extends Any {
};
OtherRef = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.OtherRef })
], OtherRef);
export { OtherRef };
let OtherRefs = class OtherRefs extends XadesCollection {
};
OtherRefs = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.OtherRefs })
], OtherRefs);
export { OtherRefs };
let ResponderID = class ResponderID extends XadesObject {
};
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.ByName,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        required: true,
    }),
    __metadata("design:type", String)
], ResponderID.prototype, "ByName", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.ByKey,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        converter: XmlBase64Converter,
        required: true,
    }),
    __metadata("design:type", Uint8Array)
], ResponderID.prototype, "ByKey", void 0);
ResponderID = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.OCSPIdentifier })
], ResponderID);
export { ResponderID };
let OCSPIdentifier = class OCSPIdentifier extends XadesObject {
};
__decorate([
    XmlAttribute({
        localName: XmlXades.AttributeNames.URI,
        defaultValue: '',
    }),
    __metadata("design:type", String)
], OCSPIdentifier.prototype, "URI", void 0);
__decorate([
    XmlChildElement({
        parser: ResponderID,
        required: true,
    }),
    __metadata("design:type", ResponderID)
], OCSPIdentifier.prototype, "ResponderID", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.IssueTime,
        parser: XadesDateTime,
        required: true,
    }),
    __metadata("design:type", XadesDateTime)
], OCSPIdentifier.prototype, "ProducedAt", void 0);
OCSPIdentifier = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.OCSPIdentifier })
], OCSPIdentifier);
export { OCSPIdentifier };
let OCSPRef = class OCSPRef extends XadesObject {
};
__decorate([
    XmlChildElement({ parser: OCSPIdentifier }),
    __metadata("design:type", OCSPIdentifier)
], OCSPRef.prototype, "OCSPIdentifier", void 0);
__decorate([
    XmlChildElement({
        parser: DigestAlgAndValueType,
        required: true,
    }),
    __metadata("design:type", DigestAlgAndValueType)
], OCSPRef.prototype, "DigestAlgAndValue", void 0);
OCSPRef = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.OCSPRef })
], OCSPRef);
export { OCSPRef };
let OCSPRefs = class OCSPRefs extends XadesCollection {
};
OCSPRefs = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.OCSPRefs })
], OCSPRefs);
export { OCSPRefs };
let CRLIdentifier = class CRLIdentifier extends XadesObject {
};
__decorate([
    XmlAttribute({
        localName: XmlXades.AttributeNames.URI,
        defaultValue: '',
    }),
    __metadata("design:type", String)
], CRLIdentifier.prototype, "URI", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.Issuer,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        required: true,
    }),
    __metadata("design:type", String)
], CRLIdentifier.prototype, "Issuer", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.IssueTime,
        parser: XadesDateTime,
        required: true,
    }),
    __metadata("design:type", XadesDateTime)
], CRLIdentifier.prototype, "IssueTime", void 0);
__decorate([
    XmlChildElement({
        localName: XmlXades.ElementNames.Number,
        namespaceURI: XmlXades.NamespaceURI,
        prefix: XmlXades.DefaultPrefix,
        converter: XmlNumberConverter,
    }),
    __metadata("design:type", Number)
], CRLIdentifier.prototype, "Number", void 0);
CRLIdentifier = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.CRLIdentifier })
], CRLIdentifier);
export { CRLIdentifier };
let CRLRef = class CRLRef extends XadesObject {
};
__decorate([
    XmlChildElement({
        parser: DigestAlgAndValueType,
        required: true,
    }),
    __metadata("design:type", DigestAlgAndValueType)
], CRLRef.prototype, "DigestAlgAndValue", void 0);
__decorate([
    XmlChildElement({ parser: CRLIdentifier }),
    __metadata("design:type", CRLIdentifier)
], CRLRef.prototype, "CRLIdentifier", void 0);
CRLRef = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.CRLRef })
], CRLRef);
export { CRLRef };
let CRLRefs = class CRLRefs extends XadesCollection {
};
CRLRefs = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.CRLRefs })
], CRLRefs);
export { CRLRefs };
let CompleteRevocationRefs = class CompleteRevocationRefs extends XadesObject {
};
__decorate([
    XmlAttribute({
        localName: XmlXades.AttributeNames.Id,
        defaultValue: '',
    }),
    __metadata("design:type", String)
], CompleteRevocationRefs.prototype, "Id", void 0);
__decorate([
    XmlChildElement({ parser: CRLRefs }),
    __metadata("design:type", CRLRefs)
], CompleteRevocationRefs.prototype, "CRLRefs", void 0);
__decorate([
    XmlChildElement({ parser: OCSPRefs }),
    __metadata("design:type", OCSPRefs)
], CompleteRevocationRefs.prototype, "OCSPRefs", void 0);
__decorate([
    XmlChildElement({ parser: OtherRefs }),
    __metadata("design:type", OtherRefs)
], CompleteRevocationRefs.prototype, "OtherRefs", void 0);
CompleteRevocationRefs = __decorate([
    XmlElement({ localName: XmlXades.ElementNames.CompleteRevocationRefs })
], CompleteRevocationRefs);
export { CompleteRevocationRefs };
